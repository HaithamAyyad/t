<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Already_Added_In" xml:space="preserve">
    <value>Already added in</value>
  </data>
  <data name="Already_Added_To" xml:space="preserve">
    <value>Is already added to </value>
  </data>
  <data name="AtLeast_OneEmployer_Record_ShouldBe_Provided" xml:space="preserve">
    <value>At least one employer record should be provided.</value>
  </data>
  <data name="Cant_Be_Blank" xml:space="preserve">
    <value>Can't be blank.</value>
  </data>
  <data name="Cant_Be_Blank_If" xml:space="preserve">
    <value>Can't be blank if </value>
  </data>
  <data name="Cant_Be_Empty" xml:space="preserve">
    <value>Can't be empty</value>
  </data>
  <data name="CountryCode_IsNot_Correct" xml:space="preserve">
    <value>Country code is not correct.</value>
  </data>
  <data name="Create_Manager_Faild" xml:space="preserve">
    <value>Create manager faild.</value>
  </data>
  <data name="Document_Is_Closed" xml:space="preserve">
    <value>Document is closed.</value>
  </data>
  <data name="Document_Is_Opened" xml:space="preserve">
    <value>Document is opened</value>
  </data>
  <data name="Doesnt_BelongTo" xml:space="preserve">
    <value>Doesn't  belong to </value>
  </data>
  <data name="Email_Is_Empty" xml:space="preserve">
    <value>Email is empty</value>
  </data>
  <data name="Email_Is_Not_Correct" xml:space="preserve">
    <value>Email is not correct</value>
  </data>
  <data name="Exception-Not-Defined" xml:space="preserve">
    <value>Exception is not defined</value>
  </data>
  <data name="Field_Is_Required" xml:space="preserve">
    <value>Field  is required.</value>
  </data>
  <data name="Field_MustBe" xml:space="preserve">
    <value>Field must be</value>
  </data>
  <data name="File_IsNot_Correct" xml:space="preserve">
    <value>File is not correct.</value>
  </data>
  <data name="File_IsNot_Exists" xml:space="preserve">
    <value>File is not exists.</value>
  </data>
  <data name="For_Year_87_And_05" xml:space="preserve">
    <value>Vaild only for year 1987 to 2005.</value>
  </data>
  <data name="HasNo_Field_OrNot_AddedTo_BlankList" xml:space="preserve">
    <value>Has no field or not added tp blankList.</value>
  </data>
  <data name="If_Year2023_Value_Must_NotExceed" xml:space="preserve">
    <value>if year 2023, value must not exceed </value>
  </data>
  <data name="Internal_Error" xml:space="preserve">
    <value>Internal Error:- </value>
  </data>
  <data name="Invaild_File" xml:space="preserve">
    <value>Invaild file.</value>
  </data>
  <data name="Invalid_Class" xml:space="preserve">
    <value>Invalid class</value>
  </data>
  <data name="IsEmpty" xml:space="preserve">
    <value>Is empty.</value>
  </data>
  <data name="IsNot_Defined" xml:space="preserve">
    <value>Is not defined</value>
  </data>
  <data name="IsNot_Provided" xml:space="preserve">
    <value>Is not provided.</value>
  </data>
  <data name="IsNot_Vaild_KindOfEmployer" xml:space="preserve">
    <value>Is not vaild KindOfEmployer.</value>
  </data>
  <data name="IsNot_Valid_Resub_Wage_File" xml:space="preserve">
    <value>Is not valid resub wage file.</value>
  </data>
  <data name="Is_Not_Valid_Agent_Indicator" xml:space="preserve">
    <value>Is not valid vagent indicator.</value>
  </data>
  <data name="Is_Not_Valid_Employment_Code" xml:space="preserve">
    <value>Is not valid Employment Code.</value>
  </data>
  <data name="Lenght_MustBe_Exactly" xml:space="preserve">
    <value>Lenght must be exactly </value>
  </data>
  <data name="Length_Exceeds" xml:space="preserve">
    <value>Length exceeds </value>
  </data>
  <data name="Length_Is_Not_Set" xml:space="preserve">
    <value>Length is not set.</value>
  </data>
  <data name="Money_Original_Must_Not_SameAs_Correct" xml:space="preserve">
    <value>The Original reported money filed must not be the same as the correct money field.</value>
  </data>
  <data name="Must_Be_AddedTo" xml:space="preserve">
    <value>Must be added to </value>
  </data>
  <data name="Must_Be_Blank" xml:space="preserve">
    <value>Must be blank</value>
  </data>
  <data name="Must_Be_Blank_If_EmploymentCode_Is" xml:space="preserve">
    <value>Must be blank if employment code is </value>
  </data>
  <data name="Must_Be_Blank_Otherwise_Fill" xml:space="preserve">
    <value>Must be blank. Otherwise fill </value>
  </data>
  <data name="Must_Be_Either_98Or99" xml:space="preserve">
    <value>Must be either 98 or 99.</value>
  </data>
  <data name="Must_Be_Either_Zero_Or_One" xml:space="preserve">
    <value>Must be either 0 or 1.</value>
  </data>
  <data name="Must_Be_EqualOr_GraterThan_TheSum_Of" xml:space="preserve">
    <value>Must be equal or grater than the sum Of </value>
  </data>
  <data name="Must_Be_Numerical" xml:space="preserve">
    <value>Must be numerical.</value>
  </data>
  <data name="Must_Be_UpperCase" xml:space="preserve">
    <value>Field must be upper case.</value>
  </data>
  <data name="Must_Be_Zero_OrEqual_To_OrGreater_ToHousHold_For_Year_If_Code_H" xml:space="preserve">
    <value>Must be zero or equal to or greater than the annual Household minimum for the tax year being reported. If Empoyment code is H.</value>
  </data>
  <data name="Must_Enter_Blanks_IfNo_Corrections" xml:space="preserve">
    <value>Must enter blanks in both fields Orignal and Correct if no corrections are being reported to this data.</value>
  </data>
  <data name="Must_Not_Start_With" xml:space="preserve">
    <value>Must not start with </value>
  </data>
  <data name="Not_Correct_MoneyData" xml:space="preserve">
    <value>Is not correct money data.</value>
  </data>
  <data name="NumberOf_EmployeeOptional_Records_IsNotCorrect" xml:space="preserve">
    <value>Number of Employee-Optional records is not correct.</value>
  </data>
  <data name="NumberOf_Employee_Records_IsNot_Correct" xml:space="preserve">
    <value>Number of Employee records is not correct.</value>
  </data>
  <data name="Position_AddedMore_ThanOnce_InBlankList" xml:space="preserve">
    <value>Position added more than once in BlankList.</value>
  </data>
  <data name="Postion_And_Length_IsNot_Correct" xml:space="preserve">
    <value>Postion and Length is not correct.</value>
  </data>
  <data name="Postion_Is_Not_Set" xml:space="preserve">
    <value>Postion is not set.</value>
  </data>
  <data name="PreparerCode_IsNot_Valid" xml:space="preserve">
    <value>Preparer code is not valid.</value>
  </data>
  <data name="Records_Should_Not_Exceed" xml:space="preserve">
    <value>records should not exceed </value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove </value>
  </data>
  <data name="Shared_WithSame_Position" xml:space="preserve">
    <value>Shared with same position</value>
  </data>
  <data name="StateCode_IsNot_Valid" xml:space="preserve">
    <value>StateCode is not valid.</value>
  </data>
  <data name="TaxYear_IsNot_Supported" xml:space="preserve">
    <value>Tax year i s not supported.</value>
  </data>
  <data name="This_Function_Only_Use_For" xml:space="preserve">
    <value>This function only used for </value>
  </data>
  <data name="Total_Is_Not_Correct" xml:space="preserve">
    <value>Total is not correct.</value>
  </data>
</root>